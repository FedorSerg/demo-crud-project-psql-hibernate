DO
$$
    DECLARE
        scriptName VARCHAR := 'Create tables for users and posts';
    BEGIN
        RAISE NOTICE 'Start of % ...', scriptName;

        CREATE TABLE IF NOT EXISTS "user"
        (
            id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            login TEXT NOT NULL
        );
        CREATE UNIQUE INDEX IF NOT EXISTS ui_user_login ON "user" (login);
        COMMENT ON TABLE "user" IS 'Users info table';
        COMMENT ON COLUMN "user".id IS 'Unique autoincrement identification number';
        COMMENT ON COLUMN "user".login IS 'Unique user login';

        CREATE TABLE IF NOT EXISTS post
        (
            id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            title     TEXT   NOT NULL,
            body      TEXT   NOT NULL,
            author_id BIGINT NOT NULL
                CONSTRAINT post_author_id_ref REFERENCES "user"
        );
        CREATE INDEX IF NOT EXISTS i_post_author_id ON post (author_id);
        COMMENT ON TABLE post IS 'Information posts table';
        COMMENT ON COLUMN post.id IS 'Unique autoincrement identification number';
        COMMENT ON COLUMN post.title IS 'Title of the post';
        COMMENT ON COLUMN post.body IS 'Main text message of the post';
        COMMENT ON COLUMN post.author_id IS 'Unique ID of the post author, see "USER" table';

        CREATE TABLE IF NOT EXISTS post_likes
        (
            post_id BIGINT NOT NULL
                CONSTRAINT post_likes_post_id_ref REFERENCES post,
            user_id BIGINT NOT NULL
                CONSTRAINT post_likes_user_id_ref REFERENCES "user",
            PRIMARY KEY (post_id, user_id)
        );
        COMMENT ON TABLE post_likes IS 'Table with information about which user liked which post, has composite primary key';
        COMMENT ON COLUMN post_likes.post_id IS 'Unique ID of the liked post, see POST table';
        COMMENT ON COLUMN post_likes.user_id IS 'Unique ID of the user that liked the post, see "USER" table';

        CREATE TABLE IF NOT EXISTS user_subscriptions
        (
            user_id         BIGINT NOT NULL
                CONSTRAINT user_subscriptions_user_id_ref REFERENCES "user",
            subscription_id BIGINT NOT NULL
                CONSTRAINT user_subscriptions_subscription_id_ref REFERENCES "user",
            PRIMARY KEY (user_id, subscription_id)
        );
        COMMENT ON TABLE user_subscriptions IS 'Table with information about which user subscribed to which user, has composite primary key';
        COMMENT ON COLUMN user_subscriptions.user_id IS 'Unique ID of the user that subscribed to another user, see "USER" table';
        COMMENT ON COLUMN user_subscriptions.subscription_id IS 'Unique ID of the followed user, see "USER" table';
    END
$$
